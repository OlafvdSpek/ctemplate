// Copyright (c) 2007, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// ---
// Author: Craig Silverstein

#ifndef TEMPLATE_TEMPLATE_PATHOPS_H_
#define TEMPLATE_TEMPLATE_PATHOPS_H_

#include <string>

// These functions are all for internal use (hence the extra
// namespace), so no need to worry about dll-exporting for windows.

@ac_windows_dllexport_defines@

@ac_google_start_namespace@

extern @ac_windows_dllexport@ const char kCWD[];       // equivalent to "./"
extern @ac_windows_dllexport@ const char kRootdir[];   // equivalent to "/"

std::string @ac_windows_dllexport@ PathJoin(const std::string& a,
                                            const std::string& b);
bool @ac_windows_dllexport@ IsAbspath(const std::string& path);
bool @ac_windows_dllexport@ IsDirectory(const std::string& path);   // ends in "/"?
void @ac_windows_dllexport@ NormalizeDirectory(std::string* dir);   // appends /
std::string @ac_windows_dllexport@ Basename(const std::string& path);

@ac_google_end_namespace@

#endif  // TEMPLATE_TEMPLATE_PATHOPS_H_
