#!/usr/bin/python
#
# Copyright (c) 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# ---
# Author: Filipe Almeida
#
# Generate a C include file from a finite state machine definition.
#
# Right now the form is the one expected by htmlparser.cc so this file is pretty
# tightly coupled with htmlparser.cc.

__author__ = 'falmeida@google.com (Filipe Almeida)'

import sys

from fsm_config import FSMConfig


class FSMGenerateAbstract(object):

  def __init__(self, config):
    self._config = config

  def Generate(self):
    """Returns the generated FSM description for the specified language.

    Raises a TypeError, because abstract methods can not be called.

    Raises:
      TypeError
    """
    raise TypeError('Abstract method %s.%s called' % (self._class.__name__,
                                                      self._function))


class FSMGenerateC(FSMGenerateAbstract):
  """Generate the C definition from a statemachien configuration object."""

  TABSTOP_ = 2

  def _Prefix(self):
    """Return a c declaration prefix."""

    return self._config.name.lower() + '_'

  def _StateInternalC(self, st):
    """Return the internal name of the state."""

    return '%sSTATE_INT_%s' % (self._Prefix().upper(), st.upper())

  def _StateExternalC(self, st):
    """Return the external name of the state."""

    return '%sSTATE_%s' % (self._Prefix().upper(), st.upper())

  def _Tab(self):
    """Returns an expanded tab string."""
    return '\t'.expandtabs(self.TABSTOP_)

  def _MakeTuple(self, data):
    """Converts data to a string representation of a C tuple."""

    return '{ %s }' % ', '.join(data)

  def _CreateHeader(self):
    """Print the include file header."""

    out = []

    if self._config.comment:
      out.append('/* ' + self._config.comment)
    else:
      out.append('/* State machine definition for ' + self._config.name)
    out.append(' * Auto generated by generate_fsm.py. Please do not edit.')
    out.append(' */')

    return '\n'.join(out)

  def _ListToIndentedString(self, list):
    indented_list = [self._Tab() + e for e in list]
    return ',\n'.join(indented_list)

  def _CreateEnum(self, name, data):
    """Print a c enum definition."""

    return 'enum %s {\n%s\n};' % (name,
                                  self._ListToIndentedString(data))

  def _CreateStructList(self, name, type, data):
    """Print a c flat list.

    Generic function to print list in c in the form of a struct.

    Args:
      name: name of the structure.
      type: type of the struct.
      data: contents of the struct as a list of elements

    Returns:
      String with the generated list.
    """

    return "static const %s %s[] = {\n%s\n};" % (
                                               type,
                                               name,
                                               self._ListToIndentedString(data))

  def _CreateStructList2(self, name, type_name, data):
    """Print a c list of lists.

    Generic function to print a list of lists in c in the form of a struct.

    Args:
      name: name of the structure.
      type_name: type of the struct.
      data: contents of the struct as a list of lists.

    Returns:
      A string containing the generated list.
    """

    tuples = [self._MakeTuple(e) for e in data]
    return "static const %s %s[] = {\n%s\n};" % (
                                                 type_name,
                                                 name,
                                             self._ListToIndentedString(tuples))

  def _CreateStatesEnum(self):
    """Print the internal states enum.

    Prints an enum containing all the valid states.

    Returns:
      String containing a C enumeration of the states.
    """
    list = []  # output list

    for state in self._config.states:
      list.append(self._StateInternalC(state))
    return self._CreateEnum(self._Prefix() + 'state_internal_enum', list)

  def _CreateStatesExternal(self):
    """Print a struct with a mapping from internal to external states."""
    list = []  # output list

    for state_name in self._config.states:
      list.append(self._StateExternalC(
                                self._config.states[state_name].external_name))

    return self._CreateStructList(self._Prefix() + 'states_external',
                                  'int',
                                  list)

  def _CreateStatesInternalNames(self):
    """Return a struct mapping internal states to a strings."""
    out = []  # output list

    for state_name in self._config.states:
      out.append('"' + state_name + '"')

    return self._CreateStructList(self._Prefix() + 'states_internal_names',
                                  'char *',
                                  out)

  def _CreateTransitions(self):
    """Print the state transition list.

    Prints a structure that fills the following struct definition based on a
    list of (condition, source, destination) tuples stored in a variable named
    transitions:

    struct statetable_transitions_s {
      const char *condition;
      state source;
      state destination;
    };

    The conditions are mapped from the conditions variable.
    The resulting list is reversed as htmlparser.c expectes the list in
    reversed order of execution, and an terminator is added:

    { NULL, STATEMACHINE_ERROR, STATEMACHINE_ERROR }

    Returns:
      String containing the generated transition table in a C struct.
    """
    out = []          # output list

    for transition in self._config.transitions:
      (condition, src, dst) = (transition.condition,
                               transition.source,
                               transition.destination)
      new_condition = '"%s"' % self._config.conditions[condition]
      out.append([new_condition,
                  self._StateInternalC(src),
                  self._StateInternalC(dst)
                 ])

    out.reverse()  # The include appears in reversed order.
    out.append(['NULL', 'STATEMACHINE_ERROR', 'STATEMACHINE_ERROR'])

    return self._CreateStructList2(self._Prefix() + 'state_transitions',
                                   'struct statetable_transitions_s',
                                   out)

  def _CreateNumStates(self):
    """Print a Macro defining the number of states."""

    return "#define %s_NUM_STATES %s" % (self._config.name.upper(),
                                         str(len(self._config.states) + 1))

  def Generate(self):
    """Returns the generated the C include statements for the statemachine."""

    print '\n\n'.join((self._CreateHeader(),
                       self._CreateNumStates(),
                       self._CreateStatesEnum(),
                       self._CreateStatesExternal(),
                       self._CreateStatesInternalNames(),
                       self._CreateTransitions()))


def main():
  if len(sys.argv) != 2:
    print "usage: generate_fsm.py config_file"
    sys.exit(1)

  config = FSMConfig()
  config.Load(sys.argv[1])

  gen = FSMGenerateC(config)
  gen.Generate()


if __name__ == "__main__":
  main()
