// Copyright (c) 2008, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---
// Author: Filipe Almeida

name = 'jsparser'

comment = 'Simplified finite state machine for tracking of javascript states'

condition('q', '\\\''),
condition('dq', '\\"'),
condition('/', '/'),
condition('*', '*'),
condition('lf', '\\n'),
condition('backslash', '\\\\'),
condition('default', '[:default:]')

# Main javascript body.
state(name = 'js_text',
      external = 'text',
      transitions = [
        ['q', 'js_q'],
        ['dq', 'js_dq'],
        ['/', 'js_comment'],
        ['default', 'js_text']
      ])

# Single quoted string literal.
state(name = 'js_q',
      external = 'q',
      transitions = [
        ['backslash', 'js_q_e'],
        ['q', 'js_text'],
        ['default', 'js_q']
      ])

# Javascript escaped character in a single quoted string literal.
state(name = 'js_q_e',
      external = 'q',
      transitions = [
        ['default', 'js_q']
      ])

# Double quoted string literal
state(name = 'js_dq',
      external = 'dq',
      transitions = [
        ['backslash', 'js_dq_e'],
        ['dq', 'js_text'],
        ['default', 'js_dq']
      ])

# Javascript escaped character in a double quoted string literal.
state(name = 'js_dq_e',
      external = 'dq',
      transitions = [
        ['default', 'js_dq']
      ])

# Possible start of a javascript comment.
state(name = 'js_comment',
      external = 'comment',
      transitions = [
        ['/', 'js_comment_ln'],
        ['*', 'js_comment_ml'],
        ['default', 'js_text']
      ])

# Start of a single line javascript comment (//).
state(name = 'js_comment_ln',
      external = 'comment',
      transitions = [
        ['lf', 'js_text'],
        ['default', 'js_comment_ln']
      ])

# Start of a multiline javascript comment (/*).
state(name = 'js_comment_ml',
      external = 'comment',
      transitions = [
        ['*', 'js_comment_ml_close'],
        ['default', 'js_comment_ml']
      ])

# Close of a multiline javascript comment (*/).
state(name = 'js_comment_ml_close',
      external = 'comment',
      transitions = [
        ['/', 'js_text'],
        ['default', 'js_comment_ml']
      ])

